services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - api-network
    depends_on:
      - orchestrator
    restart: unless-stopped

  # Main Go orchestration service
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    # No need to expose port to host anymore, only to internal network
    # Nginx will handle external access
    expose:
      - "8000"
    networks:
      - api-network
    depends_on:
      - redis
    environment:
      - RUNNER_TIMEOUT=20
      - MAX_REQUEST_SIZE=102400
      - REDIS_URL=redis:6379
    develop:
      watch:
        - action: rebuild
          path: orchestrator/

  redis:
    image: redis:alpine
    # Redis only needs to be exposed internally now
    expose:
      - "6379"
    volumes:
      - redis-data:/data
    networks:
      - api-network
    restart: unless-stopped

  golang-runner:
    build:
      context: ./runners/golang
      dockerfile: Dockerfile
    expose:
      - "8001"
    networks:
      - api-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200M
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50M
    security_opt:
      - no-new-privileges=true
    cap_drop:
      - ALL
    environment:
      - MAX_EXECUTION_TIME=5
    develop:
      watch:
        - action: rebuild
          path: ./runners/golang

  javascript-runner:
    build:
      context: ./runners/javascript
      dockerfile: Dockerfile
    networks:
      - api-network
    expose:
      - "8002"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200M
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50M
    security_opt:
      - no-new-privileges=true
    cap_drop:
      - ALL
    environment:
      - MAX_EXECUTION_TIME=5
    develop:
      watch:
        - action: rebuild
          path: ./runners/javascript

  typescript-runner:
    build:
      context: ./runners/typescript
      dockerfile: Dockerfile
    networks:
      - api-network
    expose:
      - "8003"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200M
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50M
    security_opt:
      - no-new-privileges=true
    cap_drop:
      - ALL
    environment:
      - MAX_EXECUTION_TIME=20
    develop:
      watch:
        - action: rebuild
          path: ./runners/typescript

  python-runner:
    build:
      context: ./runners/python
      dockerfile: Dockerfile
    networks:
      - api-network
    expose:
      - "8004"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 200M
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50M
    security_opt:
      - no-new-privileges=true
    cap_drop:
      - ALL
    environment:
      - MAX_EXECUTION_TIME=5
    develop:
      watch:
        - action: rebuild
          path: ./runners/python

networks:
  api-network:
    driver: bridge

volumes:
  redis-data: